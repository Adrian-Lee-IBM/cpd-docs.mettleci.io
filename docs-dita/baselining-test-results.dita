<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "dita.dtd">
<dita><topic id="baselining-a-test-result"><title>Baselining a test result</title><body><p>As the logic of your flow changes, so the test data files representing your desired output will also need to change.  DataStage can automatically re-baseline your expected output based on an execution of your DataStage job.  Note that while this process is similar to the process described in <xref href="capturing-test-data.dita" type="topic">Capturing test data</xref> this process differs in that it only captures the <b>output(s)</b> of your job.</p><fig><title>test baseline screen capture</title><image href="images/ds-test-case-baseline-output.png"><alt>representation of a DataStage job showing CSV files being injected into source stages and an output stage referngin a CSV file which does not exist</alt></image></fig></body></topic><topic id="re-capturing-test-case-results"><title>Re-capturing test case results</title><body><ol><li>In the test editor, open the <b>Test data in use</b> tree and select the test output file(s) you want to re-baseline.  In the data area above the table click the <b>trash</b> icon.</li><li>Your test specification now refers to at least one CSV data file which no longer exists. <xref href="executing-a-datastage-test-case.dita" type="topic">Execute your test case</xref> without changing the specification. DataStage will identify that no expected results exist for the file(s) youâ€™ve deleted and re-create them using the data captured at runtime.  Note that test case will fail when executed in this mode.</li><li>Re-execute the same test case job.  DataStage will now use the new baseline results files and your test case will pass.</li></ol></body></topic></dita>